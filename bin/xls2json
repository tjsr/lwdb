#!/usr/bin/env ts-node-script

import { verifyAccessOrExit, verifyStatOrExit } from '../dist/util/fileAccess.js';

import Excel from 'exceljs';
import { convertToJsonFile } from '../dist/util/xlsJsonConvertUtil.js';
import os from 'node:os';
import { loadEnv, requireEnv } from '@tjsr/simple-env-utils';
import fs, { fstat, fstatSync } from 'node:fs';

loadEnv();

const inputFile = process.argv[2] || requireEnv('EXCEL_WORKBOOK_PATH',
  'EXCEL_WORKBOOK_PATH environment variable if argument for input file is not provided');
const outDir = process.argv[3] || process.env['EXCEL_DATA_JSON_OUTPUT_PATH'] || os.tmpdir();

if (!inputFile) {
  console.error('Please provide an input file as first argument or in EXCEL_WORKBOOK_PATH environment variable');
  process.exit(1);
}

await verifyAccessOrExit(inputFile);
await verifyStatOrExit(inputFile);

console.log(`Converting ${inputFile} to CSV in ${outDir}`);
if (!fs.existsSync(outDir)) {
  console.log('Output directory does not exist, created.');
  fs.mkdirSync(outDir, { recursive: true });
}

const workbookTemplate = new Excel.Workbook();
const workbook = await workbookTemplate.xlsx.readFile(inputFile);
console.log(`Read ${workbook.worksheets.length} sheets from ${inputFile}`);

const processedSheets = [];

let sheetResolveBarrier, sheetRejectBarrier;

let sheetBarrier = new Promise((resolve, reject) => {
  sheetResolveBarrier = resolve;
  sheetRejectBarrier = reject;
});

let limitedSheets = [
  'BuildingUpgradeData',
  'ResearchUpgradeData',
];

const sheetsVar = process.argv[4] || process.env['EXCEL_SHEETS'];
if (!sheetsVar) {
  console.log('No sheets specified, processing all sheets');
} else {
  limitedSheets = sheetsVar.split(',').map((sheet) => sheet.trim());
  console.log(`Processing ${limitedSheets.length} sheets...`);
}

const excludeColumns = [
  'Obtained',
];

const sheetCount = workbook.worksheets.length;
console.log(`Processing ${sheetCount} sheets...`);
workbook.eachSheet((worksheet, sheetId) => {
  if (limitedSheets.length > 0 && !limitedSheets.includes(worksheet.name)) {
    console.log(`Skipping sheet ${worksheet.name}`);
    return;
  }
  console.log(`Processing sheet [${sheetId}] ${worksheet.name}...`);
  convertToJsonFile(worksheet, outDir, excludeColumns).then((jsonOutputFilename) => {
    console.log(`Write JSON from sheet ${worksheet.name} to ${jsonOutputFilename}`);
    if (processedSheets.length == sheetCount) {
      sheetResolveBarrier();
    }  
  });
});

sheetBarrier.then(() => {
  Promise.all(processedSheets).then(() => {
    console.log(`Processed ${processedSheets.length} sheets`);
    process.exit(0);
  }).catch((err) => {
    console.error('Error processing sheets', err);
    process.exit(4);
  });  
});
